@{
    ViewBag.Title = "Dashboard";
    var userName = User.Identity!.Name;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <title>@ViewBag.Title</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
    <style>
        body {
            background: linear-gradient(to right, #e0eafc, #cfdef3);
            font-family: 'Segoe UI', sans-serif;
        }

        .chatbox {
            max-width: 600px;
            margin: 2rem auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
            backdrop-filter: blur(6px);
        }

        .chat-log { height: 300px; overflow-y: auto; border: 1px solid #ccc; padding: 1rem; margin-bottom: 1rem; background: #fafafa; }
        .chat-input { display: flex; gap: 0.5rem; }
        .chat-input input { flex: 1; }

           

    </style>
</head>
<body>
    @section Header {
        <header>
            <nav class="navbar navbar-light bg-light border-bottom box-shadow mb-3 py-3">
                <div class="container-fluid d-flex justify-content-between align-items-center">
                    <div class="navbar-text">
                        Welcome, @userName
                    </div>
                    <div>
                        @* <a class="btn btn-outline-primary py-2 my-0" asp-controller="Account" asp-action="ChangePassword">Change Password</a> *@
                        <form method="get" asp-controller="Account" asp-action="ChangePassword" style="display:inline;">
                            <button type="submit" class="btn btn-outline-primary">Change Password</button>
                        </form>
                        <form method="post" asp-controller="Account" asp-action="Logout" style="display:inline;">
                            <button type="submit" class="btn btn-outline-danger">Log Out</button>
                        </form>
                    </div>
                </div>
            </nav>
        </header>
    }
    <div class="container ">
        <div class="row">
            <div class="col-md-6 d-flex flex-column text-center navbar navbar-light bg-white shadow-sm w-100">
                <span class="navbar-brand">🔢 Arithmetic Chat Dashboard</span>
                <button id="checkHistoryBtn" class="navbar-brand btn btn-outline-primary ms-3">Check History</button>

                <!-- History Modal -->
                <div id="historyModal" class="modal" tabindex="-1">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">User Action History</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Expression</th>
                                            <th>Result</th>
                                            <th>Created At</th>
                                        </tr>
                                    </thead>
                                    <tbody id="historyTableBody">
                                        <!-- Rows will be populated dynamically -->
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="chatbox">
                <div class="chat-log" id="chatLog"></div>
                <div class="chat-input">
                    <input type="text" id="chatInput" class="form-control" placeholder="Type an arithmetic expression (e.g. 12 + 7)" />
                    <button class="btn btn-primary" onclick="sendMessage()">Send</button>
                </div>
            </div>
        </div>
        
    </div>


    

    <script>
        async function sendMessage() {
            const input = document.getElementById("chatInput");
            const log = document.getElementById("chatLog");
            const message = input.value.trim();
            if (!message) return;

            log.innerHTML += `<div><strong>You:</strong> ${message}</div>`;

            try {
                let response = await fetch('/Home/EvaluateExpression', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ expression: message })
                });

                // If access token expired, try refresh
                if (response.status === 401) {
                    const refreshResponse = await fetch('/Account/Refresh', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ refreshToken: getRefreshToken() }) 
                    });

                    if (refreshResponse.ok) {
                        const refreshData = await refreshResponse.json();
                        storeNewAccessToken(refreshData.token); 

                        // Retry original request with new token
                        response = await fetch('/Home/EvaluateExpression', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'Authorization': `Bearer ${refreshData.token}`
                            },
                            body: JSON.stringify({ expression: message })
                        });
                    } else {
                        log.innerHTML += `<div><strong>Bot:</strong> Session expired. Please log in again.</div>`;
                        return;
                    }
                }

                const data = await response.json();
                log.innerHTML += `<div><strong>Bot:</strong> ${data.result}</div>`;
                log.scrollTop = log.scrollHeight;
                input.value = '';
            } catch (err) {
                log.innerHTML += `<div><strong>Bot:</strong> Error: ${err.message}</div>`;
            }
        }

        function getRefreshToken() {
            // Example: read from cookie or localStorage
            return localStorage.getItem("refreshToken");
        }

        function storeNewAccessToken(token) {
            // Example: store in cookie or localStorage
            localStorage.setItem("accessToken", token);
        }

                document.getElementById("checkHistoryBtn").addEventListener("click", async () => {
          const response = await fetch("/Home/History");
          const data = await response.json();

          const tbody = document.getElementById("historyTableBody");
          tbody.innerHTML = "";

          data.forEach(action => {
            const row = document.createElement("tr");
            row.innerHTML = `
              <td>${action.expression}</td>
              <td>${action.result}</td>
              <td>${new Date(action.createdAt).toLocaleString()}</td>
            `;
            tbody.appendChild(row);
          });

          const modal = new bootstrap.Modal(document.getElementById("historyModal"));
          modal.show();
        });
    </script>
</body>
</html>
